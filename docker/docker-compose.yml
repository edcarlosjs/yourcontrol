version: "3.8"
services:
  # ====================================================================================================================
  # MYSQL SERVER
  # ====================================================================================================================
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: test_db
      MYSQL_USER: user
      MYSQL_PASSWORD: user_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mysql-network
  # ====================================================================================================================
  # ADMINER - INTERFACE DE GERENCIAMENTO DE BANCO DE DADOS
  # ====================================================================================================================
  adminer:
    image: adminer
    container_name: adminer
    environment:
      ADMINER_DEFAULT_SERVER: mysql-db
    ports:
      - "8080:8080"
    volumes:
      - mysql_data:/var/lib/mysql
    depends_on:
      - mysql-db
    networks:
      - mysql-network
  # ====================================================================================================================
  # ZOOKEEPER (Necessário para o Kafka)
  # ====================================================================================================================
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-network
  # ====================================================================================================================
  # KAFKA
  # ====================================================================================================================
  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper
    networks:
      - kafka-network
  # ====================================================================================================================
  # KAFKA drop
  # ====================================================================================================================
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
  # ====================================================================================================================
  # SPRINGBOOT APP
  # ====================================================================================================================     
  springboot-app:
    build:
      context: C:/projetos/youdelivery  # Caminho para a pasta do projeto, onde o Dockerfile está
      dockerfile: Dockerfile  # O nome do Dockerfile
    ports:
      - "8080:8080"
    depends_on:
        - mysql-db
        - kafka
    networks:
      - spring-network
# ======================================================================================================================
# REDE
# ======================================================================================================================
networks:
  mysql-network:
    driver: bridge
  kafka-network:
    driver: bridge
  spring-network:
    driver: bridge
# ======================================================================================================================
# VOLUMES
# ======================================================================================================================
volumes:
  mysql_data:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data: